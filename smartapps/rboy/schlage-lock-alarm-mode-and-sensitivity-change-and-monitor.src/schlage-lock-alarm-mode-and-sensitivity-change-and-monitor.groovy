/*
 * -----------------------
 * ------ SMART APP ------
 * -----------------------
 *
 * STOP:  Do NOT PUBLISH the code to GitHub, it is a VIOLATION of the license terms.
 * You are NOT allowed share, distribute, reuse or publicly host (e.g. GITHUB) the code. Refer to the license details on our website.
 *
 */

/* **DISCLAIMER**
* THIS SOFTWARE IS PROVIDED "AS IS" AND ANY EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
* HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
* Without limitation of the foregoing, Contributors/Regents expressly does not warrant that:
* 1. the software will meet your requirements or expectations;
* 2. the software or the software content will be free of bugs, errors, viruses or other defects;
* 3. any results, output, or data provided through or generated by the software will be accurate, up-to-date, complete or reliable;
* 4. the software will be compatible with third party software;
* 5. any errors in the software will be corrected.
* The user assumes all responsibility for selecting the software and for the results obtained from the use of the software. The user shall bear the entire risk as to the quality and the performance of the software.
*/ 

def clientVersion() {
    return "02.01.01"
}

/**
* Schlage Lock Alarm Mode and Sensitivity Change and Monitor
*
* Author: RBoy Apps
* Copyright RBoy Apps, redistribution of any changes or modified code is not allowed without permission
* 2018-3-20 - (v 02.01.01) Allow all locks to be selected, check if device handler supports features, done to allow custom handler renaming to support SmartLocks
* 2018-3-13 - (v 02.01.00) Clean up UI, added support for Lock State based configuration
* 2018-2-10 - (v 02.00.00) Added support for SHM modes
* 2018-2-9 - (v 01.02.03) Use tamper alert instead of motion to support new handler and only show devices using custom handler
* 2017-5-26 - (v 01.02.02) Added ability to check for required device handler and notify user and sms now uses * to separate numbers
* 2016-10-23 - Added ability to check for new code versions automatically once a week and check for required device handler
* 2016-9-26 - Fix for broken ST phrases returning null data
* 2016-8-17 - Added workaround for ST contact address book bug
* 2016-7-22 - Added support for contact address book for customers who have this feature enabled
* 2016-1-19 - Bug fix for sensitivity not updating correctly (needs a delay between setAlarm and setSensitivity)
* 2016-1-15 - Clarified input options
* 2015-11-2 - Initial version
*/

definition(
    name: "Schlage Lock Alarm Mode and Sensitivity Change and Monitor",
    namespace: "rboy",
    author: "RBoy Apps",
    description: "This SmartApp is used to change the Schalge locks alarm and sensitivity based on changes to hub mode, routines and lock state. It also monitors for alarms on the lock",
    category: "Safety & Security",
    iconUrl: "http://www.rboyapps.com/images/Schlage.png",
    iconX2Url: "http://www.rboyapps.com/images/Schlage.png",
    iconX3Url: "http://www.rboyapps.com/images/Schlage.png")


preferences {
    page(name: "mainPage")
    page(name: "presetsPage")
    page(name: "presetModePage")
    page(name: "presetSHMPage")
    page(name: "presetRoutinePage")
    page(name: "presetLockPage")
}

def mainPage() {
    dynamicPage(name: "mainPage", title: "Schlage Lock Alarm Mode and Sensitivity Change/Monitor v${clientVersion()}", install: true, uninstall: true) {    
        section("About") {
            paragraph "NOTE: This SmartApp works only with Schlage Z-Wave locks using the RBoy Apps Universal Enhanced Z-Wave Lock with Alarms Device handler"
        }

        section("Schlage locks to configure") {
            for (lock in locks) {
                if (!lock?.hasAttribute('sensitive')) { // For now only custom DH supports sensitivity and alarm
                    def msg = "$lock IS NOT USING THE 'Universal Enhanced Z-Wave Lock With Alarms' DEVICE HANDLER, PLEASE REMOVE THE LOCK FROM THE MONITOR LIST OR UPDATE THE DEVICE HANDLER!"
                    paragraph title: msg, required: true, ""
                }
            }
            input "locks", "capability.lock", title:"Select Schlage Locks to Monitor", multiple:true, required:true, submitOnChange: true
        }

        section ("Event Based Alarm Settings"){
            href(name: "toPresets", title: "Configure lock alarms", page: "presetsPage", description: "Use this page to configure lock Alarm Modes and Sensivity based on events", required: false)
        }

        section("Lock Alarm Monitoring and Actions (optional)") {
            def modes = getAlarmModes()
            def sensitives = getAlarmSensitives()
            paragraph "Monitor lock(s) alarm and take these actions when alarm is detected"
            input "alarms", "capability.alarm", title: "External alarm to turn on", multiple: true, required: false, submitOnChange: true
            if (alarms) {
                input "alarmSilent", "bool", title: "...silent external alarm", description: "Enables only strobe light (if supported by device)", required: false
            }
            input "lights", "capability.switch", title: "Turn on these lights/switches", multiple: true, required: false, submitOnChange:true
            if (lights) {
                input "lightTimer", "number", title: "...turn off after (minutes)", description: "", required: false, range: "1..*"
            }
            input("recipients", "contact", title: "Send notifications to", multiple: true, required: false) {
                paragraph "You can enter multiple phone numbers to send an SMS to by separating them with a '*'. E.g. +15551234567*+442157654321"
                input name: "sms", title: "Send SMS notification to", type: "phone", required: false
                input "push", "bool", title: "Send Push Notification", required: false
            }
            input name: "modeMonitor", title: "Monitor lock alarm when operating in following modes(s)", type: "mode", required: false, multiple: true
        }
        
        section() {
            label title: "Assign a name for this SmartApp (optional)", required: false
            input name: "disableUpdateNotifications", title: "Don't check for new versions of the app", type: "bool", required: false
        }
    }
}

def presetsPage() {
    dynamicPage(name: "presetsPage", title: "", install: false, uninstall: false) {    
        section("About") {
            paragraph "Configure Alarm Modes and Sensitivity for the lock(s) based on specific events"
        }

        section ("Events") {
            href(name: "toModes", title: "Mode based settings", page: "presetModePage", description: presetsModesDescription(), required: false)
            href(name: "toSHM", title: "SHM based settings", page: "presetSHMPage", description: presetsSHMDescription(), required: false)
            href(name: "toRoutines", title: "Routine based settings", page: "presetRoutinePage", description: presetsPhrasesDescription(), required: false)
            href(name: "toLocks", title: "Lock State based settings", page: "presetLockPage", description: presetsLocksDescription(), required: false)
        }
    }
}

private selectAlarmSensitiveSettings(mode, prefix) {
    def modes = getAlarmModes()
    def sensitives = getAlarmSensitives()
    def lastAlarm = settings."alarm${prefix + mode}"
    def lastSensitive = settings."sensitive${prefix + mode}"
    log.trace "Last alarm for Mode $mode is $lastAlarm"
    log.trace "Last sensitive for Mode $mode is $lastSensitive"
    if (lastAlarm) {
        input name: "alarm${prefix + mode}", type: "enum", title: "Alarm level", options: modes, defaultValue: lastAlarm, description: "Select alarm mode", required: false
    } else {
        input name: "alarm${prefix + mode}", type: "enum", title: "Alarm level", options: modes, description: "Select alarm mode", required: false
    }
    if (lastSensitive) {
        input name: "sensitive${prefix + mode}", type: "enum", title: "Sensitivity level", options: sensitives, defaultValue: lastSensitive, description: "Select alarm sensitivity level", required: false
    } else {
        input name: "sensitive${prefix + mode}", type: "enum", title: "Sensitivity level", options: sensitives, description: "Select alarm sensitivity level", required: false
    }
}

def presetModePage() {
    dynamicPage(name: "presetModePage", title: "Configure the Alarm Mode and Sensitivity for each Mode in this section", install: false, uninstall: false) {    
        for (mode in location.modes) {
            def prefix = "mode"
            section("${mode}") {
                selectAlarmSensitiveSettings(mode, prefix)
            }
        }
    }
}

def presetSHMPage() {
    dynamicPage(name: "presetSHMPage", title: "Configure the Alarm Mode and Sensitivity for each SHM mode in this section", install: false, uninstall: false) {    
        for (mode in shmModes) {
            def prefix = "shm"
            section("${mode}") {
                selectAlarmSensitiveSettings(mode, prefix)
            }
        }
    }
}

def presetRoutinePage() {
    dynamicPage(name: "presetRoutinePage", title: "Configure the Alarm Mode and Sensitivity for each Routine in this section", install: false, uninstall: false) {    
        def phrases = location.helloHome?.getPhrases()
        phrases = phrases ? phrases*.label?.sort() - null : [] // Check for null ghost routines
        for (mode in phrases) {
            def prefix = ""
            section("${mode}") {
                selectAlarmSensitiveSettings(mode, prefix)
            }
        }
    }
}

def presetLockPage() {
    dynamicPage(name: "presetLockPage", title: "Configure the Alarm Mode and Sensitivity for each Lock State in this section", install: false, uninstall: false) {    
        for (mode in lockModes) {
            def prefix = "lock"
            section("${mode}") {
                selectAlarmSensitiveSettings(mode, prefix)
            }
        }
    }
}

private getAlarmModes()
{
    def ret = 	["off", "alert", "tamper", "forced"]
    log.trace "Alarm Modes -> ${ret}"
    return ret
}

private getAlarmSensitives()
{
    def ret = ["highest", "high", "medium", "low", "lowest"]
    log.trace "Alarm Sensivities -> ${ret}"
    return ret
}

private getLockModes() { ["locked", "unlocked", "unknown"] }
private getShmModes() { ["away", "stay", "off"] }

private String presetsDescription() {
    def pieces = ""
    
    pieces += presetsModesDescription(pieces)
    pieces += presetsSHMDescription(pieces)
    pieces += presetsPhrasesDescription(pieces)
    pieces += presetsLocksDescription(pieces)

    return pieces
}

private String presetsModesDescription(pieces = "") {
    for (mode in location.modes) {
        def prefix = "mode"
        def alarm = settings."alarm${prefix + mode}"
        def sensitive = settings."sensitive${prefix + mode}"
        if (alarm) {
            if (pieces.length() > 0) {
                pieces += "\n"
            }
            pieces += "$mode - $alarm"
        } else {
            if (pieces.length() > 0) {
                pieces += "\n"
            }
            pieces += "$mode - <Not set>"
        }
    }

    return pieces
}

private String presetsSHMDescription(pieces = "") {
    for (mode in shmModes) {
        def prefix = "shm"
        def alarm = settings."alarm${prefix + mode}"
        def sensitive = settings."sensitive${prefix + mode}"
        if (alarm) {
            if (pieces.length() > 0) {
                pieces += "\n"
            }
            pieces += "$mode - $alarm"
        } else {
            if (pieces.length() > 0) {
                pieces += "\n"
            }
            pieces += "$mode - <Not set>"
        }
    }

    return pieces
}

private String presetsPhrasesDescription(pieces = "") {
    def phrases = location.helloHome?.getPhrases()
    phrases = phrases ? phrases*.label?.sort() - null : [] // Check for null ghost routines
    for (mode in phrases) {
        def prefix = ""
        def alarm = settings."alarm${prefix + mode}"
        def sensitive = settings."sensitive${prefix + mode}"
        if (alarm) {
            if (pieces.length() > 0) {
                pieces += "\n"
            }
            pieces += "$mode - $alarm"
        } else {
            if (pieces.length() > 0) {
                pieces += "\n"
            }
            pieces += "$mode - <Not set>"
        }
    }

    return pieces
}

private String presetsLocksDescription(pieces = "") {
    for (mode in lockModes) {
        def prefix = "lock"
        def alarm = settings."alarm${prefix + mode}"
        def sensitive = settings."sensitive${prefix + mode}"
        if (alarm) {
            if (pieces.length() > 0) {
                pieces += "\n"
            }
            pieces += "$mode - $alarm"
        } else {
            if (pieces.length() > 0) {
                pieces += "\n"
            }
            pieces += "$mode - <Not set>"
        }
    }

    return pieces
}

def installed() {
    log.debug "Installed with settings: ${settings}"

    initialize()
}

def updated() {
    log.debug "Updated with settings: ${settings}"

    unsubscribe()
    unschedule()

    initialize()
}

def initialize() {
    log.trace "Initialize with settings: ${settings}"
    log.debug "Lock Alarm Monitor Modes: $modeMonitor"

    subscribe(location, "mode", modeChangeHandler)
    subscribe(locks, "tamperAlert.detected", motionDetected)
    subscribe(location, "routineExecuted", modeChangeHandler)
    subscribe(location, "alarmSystemStatus" , modeChangeHandler)
    subscribe(locks, "lock", modeChangeHandler)
    
    // Check for new versions of the code
    def random = new Random()
    Integer randomHour = random.nextInt(18-10) + 10
    Integer randomDayOfWeek = random.nextInt(7-1) + 1 // 1 to 7
    schedule("0 0 " + randomHour + " ? * " + randomDayOfWeek, checkForCodeUpdate) // Check for code updates once a week at a random day and time between 10am and 6pm

}

def modeChangeHandler(evt) {
    log.trace "Mode Change Handler: name: $evt.name, displayname:$evt.displayName, value:$evt.value"
    
    def mode
    def lockDevice = []
    switch (evt.name) {
    
        case "routineExecuted": // this is a Routine Executed event handler
        	def prefix = ""
        	mode = prefix + evt.displayName
        	log.debug "Routine Executed handler called, routine ${mode} was executed"
        	break
        
        case "alarmSystemStatus": // This is SHM
        	def prefix = "shm"
        	mode = prefix + evt.value // start shm modes with shm to avoid conflict with modes
            log.debug "SHM mode was changed to ${evt.value}"
            break
            
        case "lock": // This is Lock
        	def prefix = "lock"
        	mode = prefix + evt.value // start lock states with lock to avoid conflicts
            lockDevice << evt.device // We only change the settings on this lock
            log.debug "Lock ${lockDevice.first()} state was changed to ${evt.value}"
            break

        default:
            def prefix = "mode"
            mode = prefix + evt.value
	        log.debug "Mode was changed to: ${evt.value}"
    }
    
    def alarm = settings."alarm${mode}"
    def sensitive = settings."sensitive${mode}"

    log.debug "Configuring Locks alarms, alarm -> $alarm, sensitive -> $sensitive"

    if (!lockDevice) { // If we don't have a specific device then use all locks
        lockDevice = locks
    }

    lockDevice.each { lock ->
        if (alarm) {
            log.info "Setting lock $lock alarm to $alarm"
            sendNotificationEvent("Setting lock $lock alarm to $alarm")
            lock.setAlarm(alarm)
        }
    }
    if (sensitive) {
        log.trace "Updating sensitivity in 15 seconds, giving time for locks to update alarm mode" 
        runIn(15, setSensitive, [data: [sensitive: sensitive, lockId: lockDevice.collect { it.id }]]) // Give it a 15 second delay to update the lock alarm mode otherwise setSensitivity uses the old mode
    }
}

def setSensitive(data) {
    log.trace "setSensitive called, sensitivity: ${data.sensitive}"
    def sensitive = data.sensitive // We can use the current mode as it would have changed due to the event
    locks.each { lock ->
        if (data.lockId.contains(lock.id)) { // Only the locks that we need to modify
            log.info "Setting lock $lock sensitivity to $sensitive"
            sendNotificationEvent("Setting lock $lock sensitivity to $sensitive")
            lock.setSensitivity(sensitive)
        }
    }
}

def motionDetected(event) {
    log.info "Tamper Alarm detected from lock ${event.displayName}"

    if (modeMonitor && !modeMonitor.contains(location.mode)) { // Empty means all modes
        log.warn "Current mode ${location.mode} is not in the list of active monitoring modes $modeMonitor, skipping taking actions for Alarm event"
        return
    }

    def lock = locks.find { event.deviceId == it.id }
    if (!lock) {
        log.error "Alarm event is from Lock ${event.displayName} whic is not in the list of selected Locks $locks, this should not happen"
        return
    }

    // turn on the alarms
    log.debug "Turning on alarms $alarms, silent: $alarmSilent"
    alarmSilent ? alarms?.strobe() : alarms?.both()

    // turn on lights
    log.debug "Turning on lights $lights"
    lights?.on()
    if (lightTimer) {
        log.trace "Scheduling lights turn off after $lightTimer minutes"
        runIn(lightTimer * 60, turnOffLights)
    }

    // Send notifications
    def message = "${event.displayName} has detected a Tamper Alarm"
    if (location.contactBookEnabled) {
        log.debug "Sending message to $recipients"
        sendNotificationToContacts(message, recipients)
    } else {
        log.debug "SMS: $sms, Push: $push"
        sms ? sendText(sms, message) : ""
        push ? sendPush(message) : sendNotificationEvent(message)
    }
}

def turnOffLights() {
    log.debug "Schedule called, turning off lights $lights"
    lights?.off()
}

private void sendText(number, message) {
    if (number) {
        def phones = number.split("\\*")
        for (phone in phones) {
            sendSms(phone, message)
        }
    }
}

def checkForCodeUpdate(evt) {
    log.trace "Getting latest version data from the RBoy Apps server"
    
    def appName = "Schlage Lock Alarm Mode and Sensitivity Change and Monitor"
    def serverUrl = "http://smartthings.rboyapps.com"
    def serverPath = "/CodeVersions.json"
    
    try {
        httpGet([
            uri: serverUrl,
            path: serverPath
        ]) { ret ->
            log.trace "Received response from RBoy Apps Server, headers=${ret.headers.'Content-Type'}, status=$ret.status"
            //ret.headers.each {
            //    log.trace "${it.name} : ${it.value}"
            //}

            if (ret.data) {
                log.trace "Response>" + ret.data
                
                // Check for app version updates
                def appVersion = ret.data?."$appName"
                if (appVersion > clientVersion()) {
                    def msg = "New version of app ${app.label} available: $appVersion, current version: ${clientVersion()}.\nPlease visit $serverUrl to get the latest version."
                    log.info msg
                    if (!disableUpdateNotifications) {
                        sendPush(msg)
                    }
                } else {
                    log.trace "No new app version found, latest version: $appVersion"
                }
                
                // Check device handler version updates
                def caps = [ locks, alarms, lights ]
                caps?.each {
                    def devices = it?.findAll { it.hasAttribute("codeVersion") }
                    for (device in devices) {
                        if (device) {
                            def deviceName = device?.currentValue("dhName")
                            def deviceVersion = ret.data?."$deviceName"
                            if (deviceVersion && (deviceVersion > device?.currentValue("codeVersion"))) {
                                def msg = "New version of device ${device?.displayName} available: $deviceVersion, current version: ${device?.currentValue("codeVersion")}.\nPlease visit $serverUrl to get the latest version."
                                log.info msg
                                if (!disableUpdateNotifications) {
                                    sendPush(msg)
                                }
                            } else {
                                log.trace "No new device version found for $deviceName, latest version: $deviceVersion, current version: ${device?.currentValue("codeVersion")}"
                            }
                        }
                    }
                }
            } else {
                log.error "No response to query"
            }
        }
    } catch (e) {
        log.error "Exception while querying latest app version: $e"
    }
}

// THIS IS THE END OF THE FILE